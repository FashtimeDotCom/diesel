 * Tests (epoll _and_ select)
 * Memory leak checks on load of various kinds, protocols, etc, client work and 
   pools, AMQP listening, etc.
 * Client traceback niceties
 * More client/pool failure mode investigation
 * Docs of diesel patterns etc
 * More helpers, ala queue?  Async-like patterns outlined?  yield Loop, wait or bytes
 * AMQP helpers to make RPC-ish patterns easier
 * AMQP - wrap up a few more messages in (failures, etc) and doc completeness 
   (doc weird channel-must-close crap b/c Rabbit doesn't do reject)
 * Protocols: Tests for HTTP, mongodb, redis, AMQP
 * Update docstrings and website docs
 * Watch for @call returning non-response
 * Allow .schedule calls to avoid non-yield on some decorators 
   (like: pool acquire.., or connect()... or amqp queue listen)
 X Async resolver (defer to thread atm, with a queue).. A only
 * Issue Warnings on import of some protocols for (WSGI, and Pipe) 
   without tests, indicating dubious production-quality code until
   tests are submitted from 3rd parties
 * Profile and maybe optimize AMQP serialization/deserialization
 * AMQP -- cleanup timeout/interrupt handling... a way to generalize this
   pattern around queues?

Maybe?
 * Strings--out(..) wrapper?
 * Handling iter vs. non-iter more elegantly
 * Kill the logmod?  (not a diesel core-competency)
 * AMQP -- each queue bind happens on a separate channel b/c of the 
   RabbitMQ "no reject" issue?
 * Use the Queues for "sub", keep one giant listener again.
   can queues be `yield`ed?
 * Can the whole "Loop wrapper" thing be cleaned up?
